import yt
from yt.units import dimensions
import matplotlib
matplotlib.use('ps')
from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})
import math

from yt.mods import *
import numpy as na
import pylab as pl
from string import rstrip
import fields_bfield
import tracer_def

ptype = 'menc'
#ptype = ''

time_arr=  [-5474.8249854518472, -4843.0713704653926, -4216.3803466279787, -3594.6589775010489, -2901.685795127838, -2367.4366486909885, -1761.8020926824775, -1162.1336504721203, -509.00690439930622, 0.0, 314.83624582642187, 393.13734175557147, 470.98028254568999, 553.54555434129361, 629.70200954449865, 697.7322902328051, 753.01493446113636, 817.33506668021619, 875.19482342364972, 923.91409004652451, 979.32854235588093, 1037.2647634855348, 1089.5638757442412, 1147.143946106502, 1204.8336568762679, 1265.0844718598837, 1319.349397666796, 1364.8651156817432, 1426.2484321766042, 1483.9375560593671, 1536.5241310748406, 1602.2787770907307, 1659.9306677393943, 1708.4926194592663, 1768.4755305830513, 1829.841700181647, 1881.0179402065769, 1939.4506390194929, 1998.1720880389512, 2049.9941513649865, 2107.5742217272473, 2165.1542920895081]


rho_arr = [(2.5935292075150906e-16), (3.083529594169258e-16), (3.73596136554329e-16), (4.680106913380226e-16), (6.188261332000775e-16), (8.11387293865845e-16), (1.150020103073157e-15), (1.8194964919127024e-15), (3.98978945047899e-15), (1.5056249733304705e-14), (2.5012958274965894e-13), (4.906225293577676e-13), (6.618806975010999e-13), (6.976610649942535e-13), (8.439706304948969e-13), (8.821865612196137e-13), (7.447411086491561e-13), (6.112498797032477e-13), (6.625381676289861e-13), (6.655306126029436e-13), (6.376737130531813e-13), (5.743172610311102e-13), (5.359601417527245e-13), (5.778844347576575e-13), (6.512783882458984e-13), (5.719270427169164e-13), (5.317675553374105e-13), (4.498839219967393e-13), (4.329991828376825e-13), (4.2562646476976184e-13), (3.9608509977431826e-13), (3.890403349844773e-13), (3.830218711074948e-13), (3.9971538817337626e-13), (3.9905684281312083e-13), (4.138580149479255e-13), (4.315013363944637e-13), (4.2591744143660323e-13), (4.531024169198469e-13), (4.501523409804969e-13), (5.277905961304312e-13), (4.286599938239822e-13)] 

if ptype == 'menc' :
	b_arr =  [(0.002778009609684741), (0.0031196115888233204), (0.0035516365072604415), (0.0041132234413915345), (0.004925073328618909), (0.005868287295446853), (0.007269830014548886), (0.009479909413606054), (0.014824871733189436), (0.030770279808016974), (0.16992168354969295), (0.22357505342042167), (0.26038731864128806), (0.3098696936369374), (0.37918939266727203), (0.44694651693005977), (0.4820017180336457), (0.47939692790578203), (0.5287013450330026), (0.5511403980482316), (0.5897336471972039), (0.56876065289015), (0.5660948909108231), (0.5826786981393686), (0.5938106270872158), (0.5966852506007237), (0.5905304279389605), (0.5572006978032995), (0.5442508042297757), (0.5620884938687604), (0.5573893242963296), (0.5646911361021011), (0.5830155642324618), (0.5885774109133438), (0.609382374867343), (0.6051914262001286), (0.6345569940374006), (0.6334283040047912), (0.6392951928340044), (0.636038774048713), (0.7289613727556977), (0.6531691595901798)]
else:
	b_arr =  [(0.0020537887227546794), (0.0021237431612209736), (0.00221407681082952), (0.0023198621374304427), (0.0024458543540738648), (0.002542668464634837), (0.0026558748902534225), (0.0027792954697963275), (0.0029186612915984757), (0.003037853330314057), (0.0031196398678392193), (0.003140512677713755), (0.0031630131755766696), (0.0031872455967696875), (0.0032078239395373397), (0.0032268288476102066), (0.0032408515403014363), (0.0032565317406877095), (0.0032763901531463312), (0.003293284888769757), (0.0033115592297601718), (0.003330430893165336), (0.003349243782886373), (0.0033685654158918253), (0.0033898135742001616), (0.0034112748663734853), (0.003430046170816593), (0.0034444827893560627), (0.0034658484066788123), (0.0034870151880674006), (0.003504910747488433), (0.0035258320883329113), (0.0035459695682219334), (0.0035629220604616466), (0.00358279356941837), (0.0036007743903961925), (0.0036180243892941126), (0.003637730322008712), (0.00365981093806692), (0.003681489036125531), (0.003703875359575571), (0.0037275820502862093)]

print 'time_arr= ', time_arr
print 'b_arr = ', b_arr

time_arr_shift = []
for i in range(len(time_arr)):
	if ptype == 'menc':
		time_arr_shift.append(time_arr[i] + abs(min(time_arr)) + 10) #make sure time values are positive
	else:
		time_arr_shift.append(time_arr[i] + abs(min(time_arr)) + 5000 )

print 'time_arr_shift = ', time_arr_shift

lnx = np.log(time_arr_shift)
lny = np.log(b_arr)

n = float(len(lnx))
B = (n * np.sum(lnx*lny) - np.sum(lnx)*np.sum(lny))/(n*np.sum(lnx*lnx) - (np.sum(lnx))**2)

A = (np.sum(lny) - B*np.sum(lnx))/n
A = 2.71818**A

print 'A = ', A, 'B = ', B

bfit = A * (time_arr_shift**B)
print 'bfit = ', bfit 

bfit1 = []
bfit2 = []
bfit3 = []
for i in range(len(time_arr)):
	bfit1.append(min(b_arr) * (time_arr_shift[i] / min(time_arr_shift)))
	bfit2.append(min(b_arr) * (time_arr_shift[i] / min(time_arr_shift))**0.5)
	bfit3.append(min(b_arr) * (time_arr_shift[i] / min(time_arr_shift))**0.5)

print 'min time_arr_shift', min(time_arr_shift)
print 'bfit1 = ', bfit1
print 'bfit2 = ', bfit2

rho_arr = np.asarray(rho_arr)
b_arr = np.array(b_arr)
ep_arr = pow(8 * 3.4159 * 3e5 * 3e5 * rho_arr, 0.5)
print 'ep_arr = ', ep_arr

fsize = 14

#bmin = min(b_arr)  
#bmax = max(b_arr) 
if ptype == 'menc' :
	bmin = 1.e-5
	bmax = 1.e0
else:
	bmin = 1.e-3
	bmax = 1.e-2

emin = math.floor(math.log10(min(b_arr)))
emax = math.ceil(math.log10(max(b_arr)))

bmin = 10**emin
emax = 10**emax

tmin = min(time_arr) - (min(time_arr) % 100)
tmax = max(time_arr) + (100 - max(time_arr) % 100)

#pl.subplot(222)
pl.plot(time_arr, b_arr,'k', linewidth=2.5, label=r'B$_{\rm mag}$')
if ptype == 'menc' :
	#pl.plot(time_arr, bfit2, '--', linewidth=2.5, label=r'B $\sim$  t$^{0.5}$')
	#pl.plot(time_arr, bfit1 , linewidth=2.5, label=r'B $\sim$ t')
	#pl.plot(time_arr, bfit, '--', linewidth=2.5, label=r'B $\sim$ t$^{1.2}$')
	pl.plot(time_arr, b_arr/ep_arr, '--', linewidth=2.5, label=r'% of B$_{\rm sat}$')
	pl.plot(time_arr, rho_arr*1.e12, '--', linewidth=2.5, label=r'$\rho \times 10^{12}$')
else:
	#pl.plot(time_arr, bfit3 , '--', linewidth=2.5, label=r'B $\sim$ t$^{0.5}$')
	#pl.plot(time_arr, bfit1 , linewidth=2.5, label=r'B $\sim$ t')
	pl.plot(time_arr, bfit , '--', linewidth=2.5, label=r'B $\sim$ t$^{0.69}$')
ax = pl.gca()
#ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel('time [yr]', fontsize=fsize)
#ax.set_ylabel(r'B$_{\rm mag}$ [G]', fontsize=fsize)
ax.set_ylabel(r'B$_{\rm mag}$ [G]', fontsize=fsize)
pl.xticks(fontsize=fsize)
pl.yticks(fontsize=fsize)
pl.axis((tmin, tmax, bmin, bmax))
if ptype == 'menc' :
	pl.title(r'M$_{\rm enc}$ 50 M$_{\odot}$')
else:
	pl.title(r'$\rho=10^{-16}$ g cm$^{-3}$')
pl.legend(loc=2, fontsize=10)

if ptype == 'menc' :
	pl.savefig('bmenc_vs_t.eps')
else:
	pl.savefig('brho_vs_t.eps')
